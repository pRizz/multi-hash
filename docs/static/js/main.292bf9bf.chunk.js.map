{"version":3,"sources":["App.js","HashInfoBox.js","HashFunctionDefinitions.js","HashWorker.worker.js","Stats.js","serviceWorker.js","index.js"],"names":["Alert","props","elevation","variant","hashWorker","HashWorker","useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","tipCode","color","overflowWrap","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","sectionDesktop","footerColumn","flex","flexDirection","Footer","classes","style","paddingTop","paddingBottom","className","href","target","rel","button","startIcon","PRizzTipAddresses","IOTA","NANO","BANANO","ETH","BTC","PrimarySearchAppBar","onFilterValueChange","edge","aria-label","noWrap","placeholder","root","input","inputProps","onChange","event","value","component","byteFormatterList","map","byteArgs","minValue","Math","pow","prefix","formatBytes","numberOfBytes","byteFormat","toLocaleString","undefined","maximumFractionDigits","byteLength","str","s","length","i","code","charCodeAt","randomDataModels","name","byteCount","HashRandomDataButtons","onDataToHash","flexWrap","randomDataModel","key","margin","onClick","HashInfos","bufferToHash","filterText","onHashInfoData","hashFunctionProps","filter","hashFunctionProp","hashingFunctionName","toLowerCase","includes","index","worker","hashDefinitionIndex","hasWorkerListener","OrBreak","App","React","useState","textToHash","setTextToHash","Buffer","alloc","setBufferToHash","textToHashHelperText","setTextToHashHelperText","setFilterText","fileToHashHelperText","setFileToHashHelperText","jobQueueCount","setJobQueueCount","statsData","setStatsData","statsDescription","setStatsDescription","hashDoneSnackbarOpen","setHashDoneSnackbarOpen","addEventListener","e","data","type","opts","buffer","console","log","handleRandomDataToHash","handleRandomData","dataBuffer","isLoading","handleHashDoneSnackbarClose","maxWidth","id","label","multiline","rows","text","from","TextEncoder","encode","bufferFromText","byteCountFormatted","helperText","fullWidth","onDrop","acceptedFiles","forEach","file","reader","FileReader","onload","fileInfo","fileBuffer","fileName","handleFileChange","result","readAsArrayBuffer","getRootProps","getInputProps","border","borderColor","fontSize","icon","clickable","marginTop","postMessage","hashInfoData","currentHashInfoRow","findIndex","obj","push","splice","open","autoHideDuration","onClose","severity","HashInfoBox","hashText","setHashText","setHasWorkerListener","willHashBuffer","setWillHashBuffer","didHashBuffer","setDidHashBuffer","bufferThatWasHashed","setBufferThatWasHashed","setHelperText","workerData","metrics","durationMS","seconds","metricsFromInfo","hashDuration","hashDurationText","durationSeconds","MBperSecond","nsPerByte","nsPerByteText","MBperSecondText","textFromMetrics","hash","marginBottom","alignSelf","hashToHex","hexCodes","view","DataView","paddedValue","getUint32","toString","slice","join","hashingFunctionAsync","crypto","subtle","digest","then","module","exports","Worker","chartConfigs","dataKey","ChartComponentsFromChartProps","chartProps","chartProp","zIndex","chartData","top","right","left","bottom","strokeDasharray","fill","Stats","statsProps","chartConfig","statsProp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.292bf9bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container'\nimport TextField from '@material-ui/core/TextField'\n\nimport {fade, makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport {HashInfoBox} from './HashInfoBox'\nimport Dropzone from 'react-dropzone'\nimport {hashFunctionProps} from './HashFunctionDefinitions'\nimport HashWorker from './HashWorker.worker'\nimport Button from '@material-ui/core/Button'\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Stats from './Stats'\nimport {CircularProgress, Paper} from '@material-ui/core'\nimport Chip from '@material-ui/core/Chip'\nimport DescriptionIcon from '@material-ui/icons/Description'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert';\nimport PRizzTipAddresses from 'prizz-tip-addresses'\nimport Link from '@material-ui/core/Link'\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nconst hashWorker = new HashWorker() // FIXME: put in component mounted?\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  tipCode: {\n    color: 'blue',\n    overflowWrap: 'break-word'\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n    },\n  },\n  footerColumn: {\n    flex: 1,\n    flexDirection: 'column',\n    padding: 12\n  }\n}))\n\nfunction Footer() {\n  const classes = useStyles()\n  return (\n    <footer style={{backgroundColor: '#F1F1FF', paddingTop: 30, paddingBottom: 30}}>\n      <Container>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-even', alignItems: 'center'}}>\n          <div className={classes.footerColumn} style={{}}>\n            <Typography variant={'h6'}>\n              Multi Hash\n            </Typography>\n\n            <p>\n              Multi Hash is a webapp to quickly and easily\n              generate common hashes with simple text, file, or random data.\n            </p>\n            <p>It is a <Link\n              href={'https://developers.google.com/web/progressive-web-apps'}\n              variant=\"button\"\n              color=\"primary\"\n              target=\"_blank\"\n              rel=\"noopener\">\n              Progressive Web App (PWA)\n            </Link> that can run offline.</p>\n            <p>All hashing is done in your browser and varies based on the strength of your processing power.</p>\n            <p>It utilizes web workers for hashing to prevent the UI thread from being blocked.</p>\n            <p>It displays basic hashing stats and speeds based on your in-browser performance.</p>\n          </div>\n\n          <div className={classes.footerColumn}>\n            <p>Multi Hash was developed by\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                href=\"https://github.com/pRizz/\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                className={classes.button}\n                style={{marginLeft: 12, marginRight: 12}}\n                startIcon={<GitHubIcon/>}\n              >\n                @pRizz\n              </Button>\n            </p>\n            <p>Copyright © 2020 Peter Ryszkiewicz</p>\n            <p>Check out my other crypto projects at <Link\n              href=\"https://www.prizzventuresllc.com\"\n              variant=\"button\"\n              target=\"_blank\">www.prizzventuresllc.com</Link></p>\n            <p className={classes.footerColumn}>\n              <Link\n                href=\"https://www.prizzventuresllc.com/PrivacyPolicy.txt\"\n                variant=\"button\"\n                color=\"primary\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >Privacy Policy</Link>\n            </p>\n          </div>\n\n        </div>\n        <div>\n          <p>If you like these apps and want to support me making more, please consider tipping me at these\n            addresses:</p>\n          <div>\n            IOTA: <code className={classes.tipCode}>{PRizzTipAddresses.IOTA}</code>\n          </div>\n          <div>\n            NANO: <code className={classes.tipCode}>{PRizzTipAddresses.NANO}</code>\n          </div>\n          <div>\n            BANANO: <code className={classes.tipCode}>{PRizzTipAddresses.BANANO}</code>\n          </div>\n          <div>\n            ETH: <code className={classes.tipCode}>{PRizzTipAddresses.ETH}</code>\n          </div>\n          <div>\n            BTC: <code className={classes.tipCode}>{PRizzTipAddresses.BTC}</code>\n          </div>\n          <div>\n            Thanks for your support!\n          </div>\n        </div>\n\n      </Container>\n\n    </footer>\n  )\n}\n\nfunction PrimarySearchAppBar(props) {\n  const {onFilterValueChange} = props\n\n  const classes = useStyles()\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon/>\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Multi Hash\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <FilterListIcon/>\n            </div>\n            <InputBase\n              placeholder=\"Filter (sha, blake, etc.)\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{'aria-label': 'filter-list'}}\n              onChange={event => {\n                onFilterValueChange(event.target.value)\n              }}\n            />\n          </div>\n          <IconButton\n            href=\"https://github.com/pRizz/multi-hash\"\n            target=\"_blank\"\n            rel=\"noopener\"\n            variant=\"contained\"\n            className={classes.button}\n            color=\"inherit\"\n            aria-label=\"github\"\n            component=\"span\">\n            <GitHubIcon/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\n// https://en.wikipedia.org/wiki/Orders_of_magnitude_(data)\n// [1000^value, prefix]\nconst byteFormatterList = [\n  [8, 'Y'],\n  [7, 'Z'],\n  [6, 'E'],\n  [5, 'P'],\n  [4, 'T'],\n  [3, 'G'],\n  [2, 'M'],\n  [1, 'k'],\n].map((byteArgs) => {\n  return {\n    minValue: Math.pow(1000, byteArgs[0]),\n    prefix: byteArgs[1]\n  }\n})\n\n// https://en.wikipedia.org/wiki/Orders_of_magnitude_(data)\n// converts the input (number of bytes) to a human readable number, like 500 bytes or 3.5 MB\nfunction formatBytes(numberOfBytes) {\n  for (const byteFormat of byteFormatterList) {\n    if (numberOfBytes >= byteFormat.minValue) {\n      return `${(numberOfBytes / byteFormat.minValue).toLocaleString(undefined, {\n        maximumFractionDigits: 3\n      })} ${byteFormat.prefix}B`\n    }\n  }\n  return `${numberOfBytes} bytes`\n}\n\n// from https://jsperf.com/utf-8-byte-length\n// returns the byte length of a utf8 string\nfunction byteLength(str) {\n  let s = str.length\n  for (let i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i)\n    if (code > 0x7f && code <= 0x7ff) s++\n    else if (code > 0x7ff && code <= 0xffff) s += 2\n  }\n  return s;\n}\n\nconst randomDataModels = [\n  {\n    name: \"10 KB\",\n    byteCount: 1000 * 10\n  },\n  {\n    name: \"100 KB\",\n    byteCount: 100 * 1000\n  },\n  {\n    name: \"1 MB\",\n    byteCount: 1000 * 1000\n  },\n  {\n    name: \"10 MB\",\n    byteCount: 10 * 1000 * 1000\n  },\n  {\n    name: \"100 MB\",\n    byteCount: 100 * 1000 * 1000\n  },\n  {\n    name: \"500 MB (slow)\",\n    byteCount: 500 * 1000 * 1000\n  },\n  {\n    name: \"1 GB (slow)\",\n    byteCount: 1000 * 1000 * 1000\n  }\n]\n\nfunction HashRandomDataButtons(props) {\n  const {onDataToHash} = props\n\n  return (\n    <section style={{display: 'flex', justifyContent: 'center', flexWrap: 'wrap'}}>\n      {randomDataModels.map((randomDataModel) => {\n        return <Button\n          variant={'contained'}\n          color={'primary'}\n          key={randomDataModel.name}\n          style={{margin: 8}}\n          onClick={() => {\n            onDataToHash(randomDataModel.byteCount)\n          }}\n        >\n          {randomDataModel.name}\n        </Button>\n      })}\n    </section>\n  )\n}\n\nfunction HashInfos(props) {\n  const {bufferToHash, filterText, onHashInfoData} = props\n\n  return (\n    hashFunctionProps.filter((hashFunctionProp) => {\n      if (!filterText) {\n        return true\n      }\n      return hashFunctionProp.hashingFunctionName.toLowerCase().includes(filterText.toLowerCase())\n    }).map((hashFunctionProp, index) => {\n      return <HashInfoBox\n        key={hashFunctionProp.hashingFunctionName}\n        bufferToHash={bufferToHash}\n        worker={hashWorker}\n        hashDefinitionIndex={index}\n        onHashInfoData={onHashInfoData}\n        {...hashFunctionProp} />\n    })\n  )\n}\n\nfunction bufferFromText(text) {\n  return Buffer.from(new TextEncoder().encode(text))\n}\n\nlet hasWorkerListener = false\n\nfunction OrBreak() {\n  return (\n    <Typography variant={'h5'} style={{margin: 20}}>\n      Or\n    </Typography>\n  )\n}\n\nfunction App() {\n  const [textToHash, setTextToHash] = React.useState(\"\")\n  const [bufferToHash, setBufferToHash] = React.useState(Buffer.alloc(0))\n  const [textToHashHelperText, setTextToHashHelperText] = React.useState(formatBytes(0))\n  const [filterText, setFilterText] = React.useState(\"\")\n  const [fileToHashHelperText, setFileToHashHelperText] = React.useState(\"\")\n  const [jobQueueCount, setJobQueueCount] = React.useState(0)\n  const [statsData, setStatsData] = React.useState([])\n  const [statsDescription, setStatsDescription] = React.useState(\"\")\n  const [hashDoneSnackbarOpen, setHashDoneSnackbarOpen] = React.useState(false)\n\n  const handleRandomData = (opts) => {\n    const {byteCount, buffer} = opts\n    console.log(byteCount)\n    console.log(buffer)\n    handleRandomDataToHash(buffer)\n  }\n\n  if (!hasWorkerListener) {\n    hasWorkerListener = true\n    hashWorker.addEventListener('message', (e) => {\n      const {jobQueueCount} = e.data\n      if (e.data.type === \"onRandomData\") {\n        return handleRandomData(e.data.opts)\n      }\n      if (jobQueueCount !== undefined) {\n        setHashDoneSnackbarOpen(jobQueueCount === 0)\n        setJobQueueCount(jobQueueCount)\n      }\n    })\n  }\n\n  const handleTextChange = event => {\n    const text = event.target.value\n    setTextToHash(text)\n    setBufferToHash(bufferFromText(text))\n    const byteCountFormatted = formatBytes(byteLength(text))\n    setTextToHashHelperText(byteCountFormatted)\n    setStatsDescription(`${formatBytes(byteLength(text))} of text`)\n  }\n  const handleFilterValueChange = (filterText) => {\n    setFilterText(filterText)\n  }\n\n  const handleFileChange = fileInfo => {\n    const {fileBuffer, fileName} = fileInfo\n    setBufferToHash(Buffer.from(fileBuffer))\n    setFileToHashHelperText(`${fileName}: ${formatBytes(fileBuffer.byteLength)}`)\n    setStatsDescription(`${formatBytes(fileBuffer.byteLength)} of a file`)\n  }\n\n  /**\n   * hashInfoData: {\n   *   hashingFunctionName: \"sha1\",\n   *   \"duration (s)\": 12,\n   *   etc...\n   * }\n   */\n\n  const handleHashInfoData = (hashInfoData) => {\n    const currentHashInfoRow = statsData.findIndex((value, index, obj) => {\n      return value.hashingFunctionName === hashInfoData.hashingFunctionName\n    })\n    if (currentHashInfoRow < 0) {\n      statsData.push(hashInfoData)\n      return\n    }\n    statsData.splice(currentHashInfoRow, 1, hashInfoData)\n    setStatsData(statsData)\n  }\n\n  const handleRandomDataToHash = (dataBuffer) => {\n    setBufferToHash(dataBuffer)\n    setStatsDescription(`${formatBytes(dataBuffer.byteLength)} of random data`)\n  }\n\n  const isLoading = jobQueueCount > 0\n\n  const handleHashDoneSnackbarClose = () => {\n    setHashDoneSnackbarOpen(false)\n  }\n\n  const handleRandomDataButtonPressed = (byteCount) => {\n    hashWorker.postMessage({\n      type: 'onGetRandomData',\n      opts: {\n        byteCount\n      }\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <PrimarySearchAppBar onFilterValueChange={handleFilterValueChange}/>\n      <Container maxWidth=\"md\">\n        <br/>\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Text To Hash\"\n          multiline\n          rows=\"4\"\n          value={textToHash}\n          onChange={handleTextChange}\n          variant=\"outlined\"\n          helperText={textToHashHelperText}\n          fullWidth\n        />\n\n        <OrBreak/>\n\n        <Dropzone onDrop={(acceptedFiles) => {\n          acceptedFiles.forEach((file) => {\n            const reader = new FileReader()\n            reader.onload = () => {\n              handleFileChange({\n                fileBuffer: reader.result,\n                fileName: file.name\n              })\n            }\n            reader.readAsArrayBuffer(file)\n          })\n        }}>\n          {({getRootProps, getInputProps}) => (\n            <section style={{border: 'dashed gray', borderColor: (fileToHashHelperText ? 'blue' : 'gray')}}>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p style={{fontSize: 30, paddingTop: 50, margin: 0}}>Drag 'n' drop a file here, or click to select a\n                  file</p>\n                <p style={{fontSize: 30, margin: 4}}>(hashing is done locally)</p>\n                {fileToHashHelperText && <Chip\n                  icon={<DescriptionIcon></DescriptionIcon>}\n                  label={fileToHashHelperText}\n                  clickable\n                  color=\"primary\"\n                  style={{marginTop: 20}}\n                />}\n                <div style={{height: 50}}></div>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n\n        <OrBreak/>\n\n        <Typography variant={'h5'}>\n          Random Data\n        </Typography>\n\n        <HashRandomDataButtons onDataToHash={handleRandomDataButtonPressed}/>\n\n        <div style={{height: '3em'}}/>\n\n        <Typography variant={'h3'}>\n          Hash job queue count: {jobQueueCount}\n        </Typography>\n        {isLoading && <CircularProgress/>}\n\n        <HashInfos bufferToHash={bufferToHash}\n                   filterText={filterText}\n                   onHashInfoData={handleHashInfoData}\n        />\n\n        <Stats\n          statsDescription={statsDescription}\n          data={statsData}\n          isLoading={isLoading}\n        />\n\n        <Snackbar open={hashDoneSnackbarOpen} autoHideDuration={3000} onClose={handleHashDoneSnackbarClose}>\n          <Alert onClose={handleHashDoneSnackbarClose} severity=\"success\">\n            Done hashing!\n          </Alert>\n        </Snackbar>\n\n      </Container>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nfunction metricsFromInfo(durationMS, byteCount) {\n  const nanoseconds = durationMS * 1000000\n  const nsPerByte = nanoseconds / byteCount\n  const megabytes = byteCount / 1000000\n  const seconds = durationMS / 1000\n  const MBperSecond = megabytes / seconds\n\n  return {\n    \"duration (s)\": seconds,\n    \"MB/s\": MBperSecond,\n    \"ns/byte\": nsPerByte\n  }\n}\n\nfunction textFromMetrics(metrics) {\n  const durationSeconds = metrics[\"duration (s)\"]\n  const MBperSecond = metrics[\"MB/s\"]\n  const nsPerByte = metrics[\"ns/byte\"]\n\n  const hashDurationText = (durationSeconds * 1000).toLocaleString(undefined, {\n    maximumFractionDigits: 3\n  })\n  const nsPerByteText = nsPerByte.toLocaleString(undefined, {\n    maximumFractionDigits: 3\n  })\n  const MBperSecondText = MBperSecond.toLocaleString(undefined, {\n    maximumFractionDigits: 3\n  })\n  return `Took ${hashDurationText} ms | ${nsPerByteText} ns/byte | ${MBperSecondText}MB/s`\n}\n\nexport function HashInfoBox(props) {\n  const {bufferToHash, hashingFunctionName, worker, hashDefinitionIndex, onHashInfoData} = props\n\n  const [hashText, setHashText] = React.useState(\"\")\n  const [hasWorkerListener, setHasWorkerListener] = React.useState(false)\n\n  const [willHashBuffer, setWillHashBuffer] = React.useState(\"\")\n  const [didHashBuffer, setDidHashBuffer] = React.useState(\"\")\n\n  const [bufferThatWasHashed, setBufferThatWasHashed] = React.useState(null)\n  const [helperText, setHelperText] = React.useState(\"\")\n\n  if(bufferThatWasHashed === null\n  || bufferThatWasHashed.length !== bufferToHash.length) {\n    setBufferThatWasHashed(bufferToHash)\n    setWillHashBuffer(bufferToHash)\n    worker.postMessage({\n      hashDefinitionIndex,\n      bufferToHash,\n      hashingFunctionName\n    })\n    if(!hasWorkerListener) {\n      setHasWorkerListener(true)\n      worker.addEventListener('message', e => {\n        const workerData = e.data\n\n        if(workerData.hashingFunctionName !== hashingFunctionName) {\n          return\n        }\n\n        const metrics = metricsFromInfo(workerData.hashDuration, workerData.bufferToHash.length)\n        const hashDurationText = textFromMetrics(metrics)\n        setHashText(workerData.hash)\n        setDidHashBuffer(workerData.bufferToHash)\n        setHelperText(hashDurationText)\n\n        onHashInfoData({\n          hashingFunctionName,\n          ...metrics\n        })\n      })\n    }\n  }\n\n  const isLoading = willHashBuffer.length !== didHashBuffer.length // FIXME; compare buffers\n\n  return (\n    <div key={hashingFunctionName} style={{marginTop: '2em', marginBottom: '2em', position: 'relative'}}>\n      {isLoading && <div style={{position: 'absolute', justifyContent: 'center', width: '100%', height: '100%'}}>\n        <CircularProgress style={{alignSelf: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column', justifyContent: 'center', flexGrow: 1, margin: 'auto', height: '100%'}} />\n      </div>}\n      <TextField\n        id=\"outlined-multiline-static\"\n        label={hashingFunctionName}\n        multiline\n        rows=\"4\"\n        value={hashText}\n        variant=\"outlined\"\n        helperText={helperText}\n        fullWidth\n        style={{position: 'relative'}}\n      />\n    </div>\n  )\n}\n","import {blake2bHex} from 'blakejs'\nimport md5 from 'md5'\n\n// from https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nfunction hashToHex(buffer) {\n  const hexCodes = []\n  const view = new DataView(buffer)\n\n  for (let i = 0; i < view.byteLength; i += 4) {\n    const value = view.getUint32(i)\n    const stringValue = value.toString(16)\n    const padding = '00000000'\n    const paddedValue = (padding + stringValue).slice(-padding.length)\n    hexCodes.push(paddedValue)\n  }\n\n  return hexCodes.join('')\n}\n\nexport const hashFunctionProps = [\n  {\n    hashingFunctionName: \"SHA-1\",\n    hashingFunctionAsync: (bufferToHash) => {\n      return crypto.subtle.digest('SHA-1', bufferToHash).then(hash => {\n        return hashToHex(hash)\n      })\n    }\n  },\n  {\n    hashingFunctionName: 'SHA-256',\n    hashingFunctionAsync: (buffer) => {\n      return crypto.subtle.digest('SHA-256', buffer).then(hash => {\n        return hashToHex(hash)\n      })\n    }\n  },\n  {\n    hashingFunctionName: 'SHA-384',\n    hashingFunctionAsync: function (buffer) {\n      return crypto.subtle.digest('SHA-384', buffer).then(hash => {\n        return hashToHex(hash)\n      })\n    }\n  },\n  {\n    hashingFunctionName: 'SHA-512',\n    hashingFunctionAsync: function (buffer) {\n      return crypto.subtle.digest('SHA-512', buffer).then(hash => {\n        return hashToHex(hash)\n      })\n    }\n  },\n  // {\n  //   hashingFunctionName: 'blake2b',\n  //   hashingFunctionAsync: function (buffer) {\n  //     return new Promise((resolve) => {\n  //       resolve(blake2bHex(buffer, null, 64))\n  //     })\n  //   }\n  // },\n  // {\n  //   hashingFunctionName: 'md5',\n  //   hashingFunctionAsync: function (buffer) {\n  //     return new Promise((resolve) => {\n  //       resolve(md5(buffer))\n  //     })\n  //   }\n  // },\n]\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"8bb3dc51baa0b09289a1.worker.js\");\n};","import React from 'react'\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Typography from '@material-ui/core/Typography'\nimport {Paper} from '@material-ui/core'\n\nconst chartConfigs = [\n  {\n    name: \"Duration (lower is better)\",\n    dataKey: \"duration (s)\"\n  },\n  {\n    name: \"Throughput (higher is better)\",\n    dataKey: \"MB/s\"\n  },\n  {\n    name: \"Throughput Inverse (lower is better)\",\n    dataKey: \"ns/byte\"\n  }\n]\n\nfunction chartPropsFromStatsProps(statsProps) {\n  return chartConfigs.map(chartConfig => {\n    const {name, dataKey} = chartConfig\n    const chartData = statsProps.filter(statsProp => {\n      return !!statsProp[dataKey]\n    }).map(statsProp => {\n      return {\n        \"Hashing Function\": statsProp.hashingFunctionName,\n        [dataKey]: statsProp[dataKey]\n      }\n    })\n    return {\n      name,\n      dataKey,\n      chartData\n    }\n  })\n}\n\nfunction ChartComponentsFromChartProps(props) {\n  const {chartProps, isLoading} = props\n  return chartProps.map(chartProp => {\n    return (\n      <div key={chartProp.name} style={{display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative', margin: 12}}>\n        {isLoading && <div style={{position: 'absolute', justifyContent: 'center', width: '100%', height: '100%', backgroundColor: \"rgba(128, 128, 128, 0.1)\", zIndex: 10}}>\n          <CircularProgress\n            color={'secondary'}\n            style={{alignSelf: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column', justifyContent: 'center', flexGrow: 1, margin: 'auto', height: '100%'}} />\n        </div>}\n\n        <Paper style={{padding: 20, margin: 20}}>\n          <Typography variant=\"h4\">\n            {chartProp.name}\n          </Typography>\n          <BarChart\n            width={500}\n            height={300}\n            data={chartProp.chartData}\n            margin={{\n              top: 5, right: 5, left: 5, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis dataKey=\"Hashing Function\"/>\n            <YAxis/>\n            <Tooltip/>\n            <Legend/>\n            <Bar dataKey={chartProp.dataKey} fill=\"#8884d8\"/>\n          </BarChart>\n        </Paper>\n\n      </div>\n    )\n  })\n}\n\n/**\n * props: {\n *   data: [\n *     {\n *       hashingFunctionName: 'sha-1',\n *         \"duration (s)\": 12,\n *         \"MB/s\": 230,\n *         etc.\n *     }, ...\n *   ]\n * }\n * */\nexport default function Stats(props) {\n  const {data, statsDescription, isLoading} = props\n  const chartProps = chartPropsFromStatsProps(data)\n\n  return (\n    <section>\n      <Typography variant=\"h2\">\n        Stats for hashing {statsDescription || 'null value'}\n      </Typography>\n\n      <ChartComponentsFromChartProps chartProps={chartProps} isLoading={isLoading}/>\n    </section>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}